install.packages("Rweibo", repos = "http://R-Forge.R-project.org")
require(Rweibo)
install.packages("Rweibo", repos = "http://R-Forge.R-project.org")
require(Rweibo)
install.packages("devtools")
require(devtools)
install_github("rCharts", "ramnathv")
install_github("rCharts", "ramnathv")
require(devtools)
require(rCharts)
require(devTools)
install.packages("devTools")
install.packages("devtools")
require(devtools)
devtools::install_github('rstudio/shinyapps')
install.packages("Rtools")
install.packages("Googlevis")
install.packages("GoogleVis")
install.packages("googleVis")
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("googleVis")
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(shinyapps)
install.packages(c('ggplot2', 'shiny'))
install.packages('rJava', .libPaths()[1], 'http://www.rforge.net/')
install.packages('rJava',,'http://www.rforge.net/')
install.packages('rJava')
install.packages('rJava', repos='http://www.rforge.net/')
require(tm); require(SnowballC); require(data.table); library(RWeka)
R.Version()
install.packages('rJava', repos='http://www.rforge.net/')
install.packages('rJava')
require(tm); require(SnowballC); require(data.table); library(RWeka)
.libPaths()[1]
.libPaths()[2]
.libPaths()
install.packages('rJava', .libPaths()[1], 'http://www.rforge.net/')
install.packages('rJava')
require(tm); require(SnowballC); require(data.table); library(RWeka)
Sys.getenv("JAVA_HOME")
if (Sys.getenv("JAVA_HOME")!="")
Sys.setenv(JAVA_HOME="")
library(rJava)
set JAVA_HOME="C:\Program Files\Java\jre7\"
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jre7\\")
options(java.home="C:\\Program Files\\Java\\jre7\\")
library(rJava)
require(tm); require(SnowballC); require(data.table); library("RWeka")
gc()
gc()
driver <-1
trip <- 1
files <- paste0(path, driver, '/', trip, ".csv")
path <- "data/drivers/"
files <- paste0(path, driver, '/', trip, ".csv")
trip_data1 <- data.matrix(fread(files, header=T, sep="," ,stringsAsFactor=F))
require(caret);require(data.table)
trip_data1 <- data.matrix(fread(files, header=T, sep="," ,stringsAsFactor=F))
files
fread(files, header=T, sep="," ,stringsAsFactor=F)
setwd('/Users/ivan/Work_directory/Otto-Group-Product-Classification-Challenge')
setwd('H:/Machine_Learning/Otto-Group-Product-Classification-Challenge')
rm(list=ls());gc()
require(caret);require(methods);require(xgboost)
source('main/2_logloss_func.R')
load(file='data/target.RData');load(file='data/raw_data_multi.RData')
dim(train);set.seed(888)
trainIndex <- createDataPartition(train[,95], p = .7,list = FALSE)
train_df <- train[trainIndex,];test_df  <- train[-trainIndex,]
train = train_df[,-1]
test = test_df[,-1]
y = train[,ncol(train)]
y = gsub('Class_','',y)
y = as.integer(y)-1 #xgboost take features in [0,numOfClass)
x = rbind(train[,-ncol(train)],test[,-ncol(test)])
x = as.matrix(x)
x = matrix(as.numeric(x),nrow(x),ncol(x))
trind = 1:length(y)
teind = (nrow(train)+1):nrow(x)
# Set necessary parameter
param <- list("objective" = "multi:softprob",
"eval_metric" = "mlogloss",
"num_class" = 9,
"nthread" = 2)
# Run Cross Valication
cv.nround = 50
bst.cv = xgb.cv(param=param, data = x[trind,], label = y,
nfold = 10, nrounds=cv.nround)
nround = 50
bst = xgboost(param=param, data = x[trind,], label = y, nrounds=nround)
pred = predict(bst,x[teind,])
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
nround = 150
bst = xgboost(param=param, data = x[trind,], label = y, nrounds=nround)
pred = predict(bst,x[teind,])
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = x[trind,], label = y, max.depth = 8, eta = 1, nround = 150)
# Make prediction
pred = predict(bst,x[teind,])
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = x[trind,], label = y, max.depth = 2, eta = 1, nround = 150)
# Make prediction
pred = predict(bst,x[teind,])
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = x[trind,], label = y, max.depth = 4, eta = 1, nround = 150)
# Make prediction
pred = predict(bst,x[teind,])
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = x[trind,], label = y, max.depth = 6, eta = 1, nround = 150)
pred = predict(bst,x[teind,])
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = x[trind,], label = y, max.depth = 20, eta = 1, nround = 150)
pred = predict(bst,x[teind,])
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = x[trind,], label = y, max.depth = 6, eta = 0.3, nround = 150, gamma = 0.3, subsample=1)
pred = predict(bst,x[teind,])
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = x[trind,], label = y, max.depth = 6, eta = 0.1, nround = 150, gamma = 0.3, subsample=1)
pred = predict(bst,x[teind,])
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = x[trind,], label = y, max.depth = 6, eta = 0.2, nround = 150, gamma = 0.3, subsample=1)
pred = predict(bst,x[teind,])
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = x[trind,], label = y, max.depth = 6, eta = 0.4, nround = 150, gamma = 0.3, subsample=1)
pred = predict(bst,x[teind,])
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = x[trind,], label = y, max.depth = 6, eta = 0.3, nround = 150, gamma = 0.1, subsample=1)
pred = predict(bst,x[teind,])
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = x[trind,], label = y, max.depth = 6, eta = 0.3, nround = 150, gamma = 0.5, subsample=1)
pred = predict(bst,x[teind,])
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = x[trind,], label = y, max.depth = 6, eta = 0.3, nround = 150, gamma = 1, subsample=1)
pred = predict(bst,x[teind,])
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = x[trind,], label = y, max.depth = 7, eta = 0.3, nround = 150, gamma = 0.5, subsample=1)
pred = predict(bst,x[teind,])
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = x[trind,], label = y, max.depth = 4, eta = 0.3, nround = 150, gamma = 0.5, subsample=1)
pred = predict(bst,x[teind,])
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = x[trind,], label = y, max.depth = 5, eta = 0.3, nround = 150, gamma = 0.5, subsample=1)
pred = predict(bst,x[teind,])
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = x[trind,], label = y, max.depth = 6, eta = 0.3, nround = 250, gamma = 0.5, subsample=1)
pred = predict(bst,x[teind,])
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst.cv
bst
bst.cv
head（bst.cv
）
bst = xgboost(param=param, data = x[trind,], label = y, max.depth = 6, eta = 0.3, nround = 100, gamma = 0.5, subsample=1)
# Make prediction
pred = predict(bst,x[teind,])
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
ptrain <- predict(bst, x[trind,], outputmargin=TRUE)
ptest  <- predict(bst, x[teind,], outputmargin=TRUE)
head(ptrain)
setinfo(x[trind,], "base_margin", ptrain)
dtrain <- x[trind,]
dtest <- x[teind,]
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
ptrain <- predict(bst, dtrain, outputmargin=TRUE)
ptest  <- predict(bst, dtest, outputmargin=TRUE)
setinfo(dtrain, "base_margin", ptrain)
setinfo(data.matrix(dtrain), "base_margin", ptrain)
setinfo(data.matrix(dtrain), "base_margin", data.matrix(ptrain))
class(ptrain)
rm(list=ls());gc()
require(caret);require(methods);require(xgboost)
source('main/2_logloss_func.R')
load(file='data/target.RData');load(file='data/raw_data_multi.RData')
dim(train);set.seed(888)
trainIndex <- createDataPartition(train[,95], p = .7,list = FALSE)
train_df <- train[trainIndex,];test_df  <- train[-trainIndex,]
train = train_df[,-1]
test = test_df[,-1]
y = train[,ncol(train)]
y = gsub('Class_','',y)
y = as.integer(y)-1 #xgboost take features in [0,numOfClass)
x = rbind(train[,-ncol(train)],test[,-ncol(test)])
x = as.matrix(x)
x = matrix(as.numeric(x),nrow(x),ncol(x))
trind = 1:length(y)
teind = (nrow(train)+1):nrow(x)
dtrain <- x[trind,]
dtest <- x[teind,]
# Set necessary parameter
param <- list("objective" = "multi:softprob",
"eval_metric" = "mlogloss",
"num_class" = 9,
"nthread" = 4)
# Run Cross Valication
cv.nround = 50
bst.cv = xgb.cv(param=param, data = dtrain, label = y,
nfold = 10, nrounds=cv.nround)
# Train the model
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 6, eta = 0.3, nround = 150, gamma = 0.5, subsample=1,watchlist)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgb.train(param=param, data = dtrain, label = y, max.depth = 6, eta = 0.3, nround = 150, gamma = 0.5, subsample=1,eval = dtest)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 4, eta = 0.1, nround = 1000, gamma = 0.1, subsample=1)
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 4, eta = 0.2, nround = 1000, gamma = 0.2, subsample=1)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 4, eta = 0.1, nround = 500, gamma = 0.1, subsample=1)
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 6, eta = 0.1, nround = 500, gamma = 0.1, subsample=1)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 6, eta = 0.1, nround = 800, gamma = 0.1, subsample=1)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 6, eta = 0.1, nround = 500, gamma = 0.1, subsample=0.7)
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 6, eta = 0.1, nround = 500, gamma = 0.1, subsample=0.5)
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred2 = t(pred)
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred2)
pred3 <- (pred2 + pred1)/2
pred3 <- (pred2 + pred)/2
head(pred2)
head(pred)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 6, eta = 0.1, nround = 500, gamma = 0.1, subsample=0.8)
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# pred3 <- (pred2 + pred)/2
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
pred3 <- (pred2 + pred)/2
LogLoss(target_df,pred3)
set.seed(8)
set.seed(8)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 6, eta = 0.1, nround = 500, gamma = 0.1, subsample=0.8)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
pred1 <- pred
# pred_ensemble <- (pred1 + pred2 + pred3 + pred4 + pred5)/5
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred1)
set.seed(88)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 6, eta = 0.1, nround = 500, gamma = 0.1, subsample=0.8)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
pred2 <- pred
# pred_ensemble <- (pred1 + pred2 + pred3 + pred4 + pred5)/5
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred2)
set.seed(888)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 6, eta = 0.1, nround = 500, gamma = 0.1, subsample=0.8)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
pred3 <- pred
# pred_ensemble <- (pred1 + pred2 + pred3 + pred4 + pred5)/5
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred3)
set.seed(1888)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 6, eta = 0.1, nround = 500, gamma = 0.1, subsample=0.8)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
pred4 <- pred
# pred_ensemble <- (pred1 + pred2 + pred3 + pred4 + pred5)/5
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred4)
set.seed(6)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 6, eta = 0.1, nround = 500, gamma = 0.1, subsample=0.8)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
pred5 <- pred
# pred_ensemble <- (pred1 + pred2 + pred3 + pred4 + pred5)/5
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred5)
pred_ensemble <- (pred1 + pred2 + pred3 + pred4 + pred5)/5
LogLoss(target_df,pred_ensemble)
