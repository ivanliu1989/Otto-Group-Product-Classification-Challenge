bst = xgboost(param=param, data = dtrain, label = y, max.depth = 6, eta = 0.1, nround = 400, gamma = 0.1, subsample=0.8)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# pred2 <- pred
# pred_ensemble <- (pred1 + pred2 + pred3 + pred4 + pred5)/5
# for (i in 1:9){
#     for (j in 1:nrow(pred1)){
#         pred_ensemble[j,i] <- max(pred1[j,i],pred2[j,i],pred3[j,i],pred4[j,i],pred5[j,i])
#     }
# }
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 6, eta = 0.1, nround = 400, gamma = 0.1, subsample=0.9)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# pred2 <- pred
# pred_ensemble <- (pred1 + pred2 + pred3 + pred4 + pred5)/5
# for (i in 1:9){
#     for (j in 1:nrow(pred1)){
#         pred_ensemble[j,i] <- max(pred1[j,i],pred2[j,i],pred3[j,i],pred4[j,i],pred5[j,i])
#     }
# }
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 6, eta = 0.1, nround = 400, gamma = 0.1, subsample=0.85)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# pred2 <- pred
# pred_ensemble <- (pred1 + pred2 + pred3 + pred4 + pred5)/5
# for (i in 1:9){
#     for (j in 1:nrow(pred1)){
#         pred_ensemble[j,i] <- max(pred1[j,i],pred2[j,i],pred3[j,i],pred4[j,i],pred5[j,i])
#     }
# }
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 6, eta = 0.1, nround = 400, gamma = 0.1, subsample=0.75)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# pred2 <- pred
# pred_ensemble <- (pred1 + pred2 + pred3 + pred4 + pred5)/5
# for (i in 1:9){
#     for (j in 1:nrow(pred1)){
#         pred_ensemble[j,i] <- max(pred1[j,i],pred2[j,i],pred3[j,i],pred4[j,i],pred5[j,i])
#     }
# }
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 6, eta = 0.1, nround = 350, gamma = 0.1, subsample=0.8)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# pred2 <- pred
# pred_ensemble <- (pred1 + pred2 + pred3 + pred4 + pred5)/5
# for (i in 1:9){
#     for (j in 1:nrow(pred1)){
#         pred_ensemble[j,i] <- max(pred1[j,i],pred2[j,i],pred3[j,i],pred4[j,i],pred5[j,i])
#     }
# }
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 6, eta = 0.1, nround = 500, gamma = 0.1, subsample=0.8)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# pred2 <- pred
# pred_ensemble <- (pred1 + pred2 + pred3 + pred4 + pred5)/5
# for (i in 1:9){
#     for (j in 1:nrow(pred1)){
#         pred_ensemble[j,i] <- max(pred1[j,i],pred2[j,i],pred3[j,i],pred4[j,i],pred5[j,i])
#     }
# }
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 6, eta = 0.05, nround = 500, gamma = 0.05, subsample=0.8)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# pred2 <- pred
# pred_ensemble <- (pred1 + pred2 + pred3 + pred4 + pred5)/5
# for (i in 1:9){
#     for (j in 1:nrow(pred1)){
#         pred_ensemble[j,i] <- max(pred1[j,i],pred2[j,i],pred3[j,i],pred4[j,i],pred5[j,i])
#     }
# }
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 8, eta = 0.05, nround = 500, gamma = 0.05, subsample=0.8)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# pred2 <- pred
# pred_ensemble <- (pred1 + pred2 + pred3 + pred4 + pred5)/5
# for (i in 1:9){
#     for (j in 1:nrow(pred1)){
#         pred_ensemble[j,i] <- max(pred1[j,i],pred2[j,i],pred3[j,i],pred4[j,i],pred5[j,i])
#     }
# }
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 8, eta = 0.05, nround = 800, gamma = 0.05, subsample=0.8)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# pred2 <- pred
# pred_ensemble <- (pred1 + pred2 + pred3 + pred4 + pred5)/5
# for (i in 1:9){
#     for (j in 1:nrow(pred1)){
#         pred_ensemble[j,i] <- max(pred1[j,i],pred2[j,i],pred3[j,i],pred4[j,i],pred5[j,i])
#     }
# }
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 8, eta = 0.05, nround = 400, gamma = 0.05, subsample=0.8)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# pred2 <- pred
# pred_ensemble <- (pred1 + pred2 + pred3 + pred4 + pred5)/5
# for (i in 1:9){
#     for (j in 1:nrow(pred1)){
#         pred_ensemble[j,i] <- max(pred1[j,i],pred2[j,i],pred3[j,i],pred4[j,i],pred5[j,i])
#     }
# }
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 8, eta = 0.05, nround = 600, gamma = 0.05, subsample=0.8)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# pred2 <- pred
# pred_ensemble <- (pred1 + pred2 + pred3 + pred4 + pred5)/5
# for (i in 1:9){
#     for (j in 1:nrow(pred1)){
#         pred_ensemble[j,i] <- max(pred1[j,i],pred2[j,i],pred3[j,i],pred4[j,i],pred5[j,i])
#     }
# }
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 6, eta = 0.05, nround = 600, gamma = 0.05, subsample=0.8)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# pred2 <- pred
# pred_ensemble <- (pred1 + pred2 + pred3 + pred4 + pred5)/5
# for (i in 1:9){
#     for (j in 1:nrow(pred1)){
#         pred_ensemble[j,i] <- max(pred1[j,i],pred2[j,i],pred3[j,i],pred4[j,i],pred5[j,i])
#     }
# }
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 8, eta = 0.01, nround = 600, gamma = 0.01, subsample=0.8)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# pred2 <- pred
# pred_ensemble <- (pred1 + pred2 + pred3 + pred4 + pred5)/5
# for (i in 1:9){
#     for (j in 1:nrow(pred1)){
#         pred_ensemble[j,i] <- max(pred1[j,i],pred2[j,i],pred3[j,i],pred4[j,i],pred5[j,i])
#     }
# }
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 6, eta = 0.01, nround = 1000, gamma = 0.01, subsample=0.8)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# pred2 <- pred
# pred_ensemble <- (pred1 + pred2 + pred3 + pred4 + pred5)/5
# for (i in 1:9){
#     for (j in 1:nrow(pred1)){
#         pred_ensemble[j,i] <- max(pred1[j,i],pred2[j,i],pred3[j,i],pred4[j,i],pred5[j,i])
#     }
# }
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 6, eta = 0.03, nround = 1000, gamma = 0.03, subsample=0.8)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# pred2 <- pred
# pred_ensemble <- (pred1 + pred2 + pred3 + pred4 + pred5)/5
# for (i in 1:9){
#     for (j in 1:nrow(pred1)){
#         pred_ensemble[j,i] <- max(pred1[j,i],pred2[j,i],pred3[j,i],pred4[j,i],pred5[j,i])
#     }
# }
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 6, eta = 0.03, nround = 800, gamma = 0.03, subsample=0.8)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# pred2 <- pred
# pred_ensemble <- (pred1 + pred2 + pred3 + pred4 + pred5)/5
# for (i in 1:9){
#     for (j in 1:nrow(pred1)){
#         pred_ensemble[j,i] <- max(pred1[j,i],pred2[j,i],pred3[j,i],pred4[j,i],pred5[j,i])
#     }
# }
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 6, eta = 0.03, nround = 1500, gamma = 0.03, subsample=0.8)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# pred2 <- pred
# pred_ensemble <- (pred1 + pred2 + pred3 + pred4 + pred5)/5
# for (i in 1:9){
#     for (j in 1:nrow(pred1)){
#         pred_ensemble[j,i] <- max(pred1[j,i],pred2[j,i],pred3[j,i],pred4[j,i],pred5[j,i])
#     }
# }
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 7, eta = 0.03, nround = 1500, gamma = 0.03, subsample=0.8)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# pred2 <- pred
# pred_ensemble <- (pred1 + pred2 + pred3 + pred4 + pred5)/5
# for (i in 1:9){
#     for (j in 1:nrow(pred1)){
#         pred_ensemble[j,i] <- max(pred1[j,i],pred2[j,i],pred3[j,i],pred4[j,i],pred5[j,i])
#     }
# }
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 6, eta = 0.03, nround = 1200, gamma = 0.03, subsample=0.8)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# pred2 <- pred
# pred_ensemble <- (pred1 + pred2 + pred3 + pred4 + pred5)/5
# for (i in 1:9){
#     for (j in 1:nrow(pred1)){
#         pred_ensemble[j,i] <- max(pred1[j,i],pred2[j,i],pred3[j,i],pred4[j,i],pred5[j,i])
#     }
# }
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 6, eta = 0.03, nround = 600, gamma = 0.03, subsample=0.8)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# pred2 <- pred
# pred_ensemble <- (pred1 + pred2 + pred3 + pred4 + pred5)/5
# for (i in 1:9){
#     for (j in 1:nrow(pred1)){
#         pred_ensemble[j,i] <- max(pred1[j,i],pred2[j,i],pred3[j,i],pred4[j,i],pred5[j,i])
#     }
# }
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 6, eta = 0.03, nround = 900, gamma = 0.03, subsample=0.8)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# pred2 <- pred
# pred_ensemble <- (pred1 + pred2 + pred3 + pred4 + pred5)/5
# for (i in 1:9){
#     for (j in 1:nrow(pred1)){
#         pred_ensemble[j,i] <- max(pred1[j,i],pred2[j,i],pred3[j,i],pred4[j,i],pred5[j,i])
#     }
# }
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 8, eta = 0.03, nround = 900, gamma = 0.03, subsample=0.8)
# Make prediction
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
# pred2 <- pred
# pred_ensemble <- (pred1 + pred2 + pred3 + pred4 + pred5)/5
# for (i in 1:9){
#     for (j in 1:nrow(pred1)){
#         pred_ensemble[j,i] <- max(pred1[j,i],pred2[j,i],pred3[j,i],pred4[j,i],pred5[j,i])
#     }
# }
# Validation
target_df <- target[-trainIndex,]
LogLoss(target_df,pred)
dtest <- cbind(dtest, pred)
head(dtest)
pred = predict(bst,dtrain)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
dtrain <- cbind(dtrain,pred)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 8, eta = 0.03, nround = 900, gamma = 0.03, subsample=0.8)
### Make prediction ###
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
LogLoss(target_df,pred)
head(dtest)
head(dtrain)
head(dtest)
rm(list=ls());gc()
require(caret);require(methods);require(xgboost)
source('main/2_logloss_func.R')
load(file='data/target.RData')
load(file='data/raw_data_multi.RData')
load(file='data/raw_data_PCA.RData')
dim(train);set.seed(888)
# trainIndex <- createDataPartition(train$target, p = .7,list = FALSE)
# train_df <- train[trainIndex,];test_df  <- train[-trainIndex,]
train = train[,-which(names(train_df) %in% c("id"))] #train
test = test[,-which(names(test_df) %in% c("id"))] #test
y = train[,'target']
y = gsub('Class_','',y)
y = as.integer(y)-1 #xgboost take features in [0,numOfClass)
x = rbind(train[,-which(names(train) %in% c("target"))],test[,-which(names(test) %in% c("target"))])
x = as.matrix(x)
x = matrix(as.numeric(x),nrow(x),ncol(x))
trind = 1:length(y)
teind = (nrow(train)+1):nrow(x)
dtrain <- x[trind,]
dtest <- x[teind,]
### Set necessary parameter ###
param <- list("objective" = "multi:softprob",
"eval_metric" = "mlogloss",
"num_class" = 9,
"nthread" = 4)
rm(list=ls());gc()
require(caret);require(methods);require(xgboost)
source('main/2_logloss_func.R')
load(file='data/target.RData')
load(file='data/raw_data_multi.RData')
dim(train);set.seed(888)
train = train[,-which(names(train_df) %in% c("id"))] #train
test = test[,-which(names(test_df) %in% c("id"))] #test
y = train[,'target']
y = gsub('Class_','',y)
y = as.integer(y)-1 #xgboost take features in [0,numOfClass)
x = rbind(train[,-which(names(train) %in% c("target"))],test[,-which(names(test) %in% c("target"))])
x = as.matrix(x)
x = matrix(as.numeric(x),nrow(x),ncol(x))
trind = 1:length(y)
teind = (nrow(train)+1):nrow(x)
dtrain <- x[trind,]
dtest <- x[teind,]
### Set necessary parameter ###
param <- list("objective" = "multi:softprob",
"eval_metric" = "mlogloss",
"num_class" = 9,
"nthread" = 4)
# Run Cross Valication
# cv.nround = 50
# bst.cv = xgb.cv(param=param, data = dtrain, label = y,
#                 nfold = 10, nrounds=cv.nround)
### Train the model ###
set.seed(18)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 8, eta = 0.05, nround = 500, gamma = 0.05, subsample=0.8)
train = train[,-which(names(train_df) %in% c("id"))] #train
rm(list=ls());gc()
require(caret);require(methods);require(xgboost)
source('main/2_logloss_func.R')
load(file='data/target.RData')
load(file='data/raw_data_multi.RData')
# load(file='data/raw_data_PCA.RData')
dim(train);set.seed(888)
# trainIndex <- createDataPartition(train$target, p = .7,list = FALSE)
# train_df <- train[trainIndex,];test_df  <- train[-trainIndex,]
train = train[,-which(names(train) %in% c("id"))] #train
test = test[,-which(names(test) %in% c("id"))] #test
y = train[,'target']
y = gsub('Class_','',y)
y = as.integer(y)-1 #xgboost take features in [0,numOfClass)
x = rbind(train[,-which(names(train) %in% c("target"))],test[,-which(names(test) %in% c("target"))])
x = as.matrix(x)
x = matrix(as.numeric(x),nrow(x),ncol(x))
trind = 1:length(y)
teind = (nrow(train)+1):nrow(x)
dtrain <- x[trind,]
dtest <- x[teind,]
rm(list=ls());gc()
require(caret);require(methods);require(xgboost)
source('main/2_logloss_func.R')
load(file='data/target.RData')
load(file='data/raw_data_multi.RData')
# load(file='data/raw_data_PCA.RData')
dim(train);set.seed(888)
# trainIndex <- createDataPartition(train$target, p = .7,list = FALSE)
# train_df <- train[trainIndex,];test_df  <- train[-trainIndex,]
train = train[,-which(names(train) %in% c("id"))] #train
test = test[,-which(names(test) %in% c("id"))] #test
y = train[,'target']
y = gsub('Class_','',y)
y = as.integer(y)-1 #xgboost take features in [0,numOfClass)
x = rbind(train[,-which(names(train) %in% c("target"))],test)#[,-which(names(test) %in% c("target"))])
x = as.matrix(x)
x = matrix(as.numeric(x),nrow(x),ncol(x))
trind = 1:length(y)
teind = (nrow(train)+1):nrow(x)
param <- list("objective" = "multi:softprob",
"eval_metric" = "mlogloss",
"num_class" = 9,
"nthread" = 4)
set.seed(18)
dtrain <- x[trind,]
dtest <- x[teind,]
dim(dtest)
dim(dtrain)
param <- list("objective" = "multi:softprob",
"eval_metric" = "mlogloss",
"num_class" = 9,
"nthread" = 4)
# Run Cross Valication
# cv.nround = 50
# bst.cv = xgb.cv(param=param, data = dtrain, label = y,
#                 nfold = 10, nrounds=cv.nround)
### Train the model ###
set.seed(8)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 8, eta = 0.05, nround = 500, gamma = 0.05, subsample=0.8)
### Make prediction ###
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
### Ensemble ###
pred1 <- pred
param <- list("objective" = "multi:softprob",
"eval_metric" = "mlogloss",
"num_class" = 9,
"nthread" = 4)
# Run Cross Valication
# cv.nround = 50
# bst.cv = xgb.cv(param=param, data = dtrain, label = y,
#                 nfold = 10, nrounds=cv.nround)
### Train the model ###
set.seed(18)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 8, eta = 0.05, nround = 500, gamma = 0.05, subsample=0.8)
### Make prediction ###
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
### Ensemble ###
pred2 <- pred
set.seed(28)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 8, eta = 0.05, nround = 500, gamma = 0.05, subsample=0.8)
### Make prediction ###
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
### Ensemble ###
pred3 <- pred
set.seed(68)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 8, eta = 0.05, nround = 500, gamma = 0.05, subsample=0.8)
### Make prediction ###
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
### Ensemble ###
pred4 <- pred
### Train the model ###
set.seed(88)
bst = xgboost(param=param, data = dtrain, label = y, max.depth = 8, eta = 0.05, nround = 500, gamma = 0.05, subsample=0.8)
### Make prediction ###
pred = predict(bst,dtest)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
### Ensemble ###
pred5 <- pred
source('~/.active-rstudio-document', echo=TRUE)
pred_ensemble <- (pred1 + pred2 + pred3 + pred4 + pred5)/5
