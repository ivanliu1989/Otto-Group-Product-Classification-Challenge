install.packages("Rweibo", repos = "http://R-Forge.R-project.org")
require(Rweibo)
install.packages("Rweibo", repos = "http://R-Forge.R-project.org")
require(Rweibo)
install.packages("devtools")
require(devtools)
install_github("rCharts", "ramnathv")
install_github("rCharts", "ramnathv")
require(devtools)
require(rCharts)
require(devTools)
install.packages("devTools")
install.packages("devtools")
require(devtools)
devtools::install_github('rstudio/shinyapps')
install.packages("Rtools")
install.packages("Googlevis")
install.packages("GoogleVis")
install.packages("googleVis")
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("googleVis")
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(shinyapps)
install.packages(c('ggplot2', 'shiny'))
install.packages('rJava', .libPaths()[1], 'http://www.rforge.net/')
install.packages('rJava',,'http://www.rforge.net/')
install.packages('rJava')
install.packages('rJava', repos='http://www.rforge.net/')
require(tm); require(SnowballC); require(data.table); library(RWeka)
R.Version()
install.packages('rJava', repos='http://www.rforge.net/')
install.packages('rJava')
require(tm); require(SnowballC); require(data.table); library(RWeka)
.libPaths()[1]
.libPaths()[2]
.libPaths()
install.packages('rJava', .libPaths()[1], 'http://www.rforge.net/')
install.packages('rJava')
require(tm); require(SnowballC); require(data.table); library(RWeka)
Sys.getenv("JAVA_HOME")
if (Sys.getenv("JAVA_HOME")!="")
Sys.setenv(JAVA_HOME="")
library(rJava)
set JAVA_HOME="C:\Program Files\Java\jre7\"
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jre7\\")
options(java.home="C:\\Program Files\\Java\\jre7\\")
library(rJava)
require(tm); require(SnowballC); require(data.table); library("RWeka")
gc()
gc()
driver <-1
trip <- 1
files <- paste0(path, driver, '/', trip, ".csv")
path <- "data/drivers/"
files <- paste0(path, driver, '/', trip, ".csv")
trip_data1 <- data.matrix(fread(files, header=T, sep="," ,stringsAsFactor=F))
require(caret);require(data.table)
trip_data1 <- data.matrix(fread(files, header=T, sep="," ,stringsAsFactor=F))
files
fread(files, header=T, sep="," ,stringsAsFactor=F)
setwd('H:/Machine_Learning/Otto-Group-Product-Classification-Challenge')
rm(list=ls());gc()
require(caret);require(methods);require(xgboost)
source('main_R/2_logloss_func.R');load(file='data/target.RData');load(file='data/raw_data_newFeat.RData')
trainIndex <- createDataPartition(train$target, p = .7,list = FALSE)
train_df <- train[trainIndex,];test_df  <- train[-trainIndex,]
metaIndex <- createDataPartition(train_df$target, p = .7,list = FALSE)
base_df <- train_df[metaIndex,];meta_df  <- train_df[-metaIndex,]
dim(base_df);dim(meta_df);dim(test_df)
dim(base_df);dim(meta_df);dim(test_df);dim(train)
base_df <- shuffle(base_df)
meta_df <- shuffle(meta_df)
base_df = base_df[,-which(names(base_df) %in% c("id"))]
meta_df = meta_df[,-which(names(meta_df) %in% c("id"))]
test_df = test_df[,-which(names(test_df) %in% c("id"))]
base_y = as.integer(gsub('Class_','',base_df[,'target']))-1
base_y
meta_y = as.integer(gsub('Class_','',meta_df[,'target']))-1
test_y = as.integer(gsub('Class_','',test_df[,'target']))-1
train[,-base_df(names(base_df) %in% c("target"))]
base_df[,-base_df(names(base_df) %in% c("target"))]
base_df[,-which(names(base_df) %in% c("target"))]
base_x = as.matrix(base_df[,-which(names(base_df) %in% c("target"))])
meta_x = as.matrix(meta_df[,-which(names(meta_df) %in% c("target"))])
test_x = as.matrix(test_df[,-which(names(test_df) %in% c("target"))])
param <- list("objective" = "multi:softprob",
"eval_metric" = "mlogloss",
"nthread" = 2, set.seed = 168, eta=0.05, gamma = 0.05, #<<============#
"num_class" = 9, max.depth=8, min_child_weight=4,
subsample=0.8, colsample_bytree = 0.9)
cv.nround = 668
bst = xgboost(param=param, data = base_x, label = base_y, nround = cv.nround)
base_x = matrix(as.numeric(base_x),nrow(base_x),ncol(base_x))
bst = xgboost(param=param, data = base_x, label = base_y, nround = cv.nround)
meta_pred = predict(bst,meta_x)#, ntreelimit=1
meta_pred = predict(bst,base_x)#, ntreelimit=1
bst
meta_x = matrix(as.numeric(meta_x),nrow(meta_x),ncol(meta_x))
test_x = matrix(as.numeric(test_x),nrow(test_x),ncol(test_x))
meta_pred = predict(bst,meta_x)
meta_pred = matrix(meta_pred,9,length(meta_pred)/9)
meta_pred = t(meta_pred)
MulLogLoss(meta_y,meta_pred)
meta_pred
meta_y
dummies <- dummyVars(~target, data = meta_y)
dummies <- dummyVars(~, data = meta_y)
dummies <- dummyVars(data = meta_y)
dummies <- dummyVars(~.,data = meta_y)
meta_target <- predict(dummies, newdata = meta_y)
meta_y
dummies
dummies <- dummyVars(~target, data = meta_df)
meta_target <- predict(dummies, newdata = meta_df)
MulLogLoss(meta_target,meta_pred)
meta_pred
test_pred = predict(bst,test_x)
test_pred = matrix(test_pred,9,length(test_pred)/9)
test_pred = t(test_pred)
bst_meta = xgboost(param=param, data = meta_pred, label = meta_y, nround = cv.nround)
test_p = predict(bst_meta,test_pred)
test_p = matrix(test_p,9,length(test_p)/9)
test_p = t(test_p)
dummies_t <- dummyVars(~target, data = test_df)
test_target <- predict(dummies_t, newdata = test_df)
MulLogLoss(test_target,test_p)
MulLogLoss(meta_target,meta_pred)
meta_pred <- cbind(meta_x,meta_pred)
bst_meta = xgboost(param=param, data = meta_pred, label = meta_y, nround = cv.nround)
test_pred <- cbind(test_x,test_pred)
test_p = predict(bst_meta,test_pred)
test_p = matrix(test_p,9,length(test_p)/9)
test_p = t(test_p)
MulLogLoss(test_target,test_p)
test_target
dim(test_target)
dim(test_p)
test_p
rm(list=ls());gc()
require(caret);require(methods);require(xgboost)
source('main_R/2_logloss_func.R');load(file='data/target.RData');load(file='data/raw_data_multi.RData')
trainIndex <- createDataPartition(train$target, p = .7,list = FALSE)
train_df <- train[trainIndex,];test_df  <- train[-trainIndex,]
metaIndex <- createDataPartition(train_df$target, p = .7,list = FALSE)
base_df <- train_df[metaIndex,];meta_df  <- train_df[-metaIndex,]
dim(base_df);dim(meta_df);dim(test_df);dim(train)
base_df <- shuffle(base_df)
meta_df <- shuffle(meta_df)
base_df = base_df[,-which(names(base_df) %in% c("id"))]
meta_df = meta_df[,-which(names(meta_df) %in% c("id"))]
test_df = test_df[,-which(names(test_df) %in% c("id"))]
base_y = as.integer(gsub('Class_','',base_df[,'target']))-1
meta_y = as.integer(gsub('Class_','',meta_df[,'target']))-1
test_y = as.integer(gsub('Class_','',test_df[,'target']))-1
base_x = as.matrix(base_df[,-which(names(base_df) %in% c("target"))])
base_x = matrix(as.numeric(base_x),nrow(base_x),ncol(base_x))
meta_x = as.matrix(meta_df[,-which(names(meta_df) %in% c("target"))])
meta_x = matrix(as.numeric(meta_x),nrow(meta_x),ncol(meta_x))
test_x = as.matrix(test_df[,-which(names(test_df) %in% c("target"))])
test_x = matrix(as.numeric(test_x),nrow(test_x),ncol(test_x))
param <- list("objective" = "multi:softprob",
"eval_metric" = "mlogloss",
"nthread" = 2, set.seed = 168, eta=0.1, gamma = 0.1,
"num_class" = 9, max.depth=8, min_child_weight=4,
subsample=1, colsample_bytree = 1)
cv.nround = 100
bst = xgboost(param=param, data = base_x, label = base_y, nround = cv.nround)
meta_pred = predict(bst,meta_x)
meta_pred = matrix(meta_pred,9,length(meta_pred)/9)
meta_pred = t(meta_pred)
dummies <- dummyVars(~target, data = meta_df)
meta_target <- predict(dummies, newdata = meta_df)
MulLogLoss(meta_target,meta_pred)
### train meta+base ###
test_pred = predict(bst,test_x)
test_pred = matrix(test_pred,9,length(test_pred)/9)
test_pred = t(test_pred)
# meta_pred <- cbind(meta_x,meta_pred)
# test_pred <- cbind(test_x,test_pred)
param <- list("objective" = "multi:softprob",
"eval_metric" = "mlogloss",
"nthread" = 2, set.seed = 168, eta=0.05, gamma = 0.05,
"num_class" = 9, max.depth=8, min_child_weight=4,
subsample=1, colsample_bytree = 1)
cv.nround = 668
bst_meta = xgboost(param=param, data = meta_pred, label = meta_y, nround = cv.nround)
test_p = predict(bst_meta,test_pred)
test_p = matrix(test_p,9,length(test_p)/9)
test_p = t(test_p)
dummies_t <- dummyVars(~target, data = test_df)
test_target <- predict(dummies_t, newdata = test_df)
MulLogLoss(test_target,test_p)
